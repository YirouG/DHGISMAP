# -*- coding: utf-8 -*-
"""mapdh1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a38AeatDDHpc8l5FS0n7KBOFk7dZptJV
"""


# Import Libraries
import pandas as pd
import geopandas as gpd
import folium
import matplotlib.pyplot as plt
from shapely.geometry import Point


df1 = pd.read_csv("map1.csv")

# Keep only relevant columns
df = df1.loc[:, ("Heading_Text", "URL", "Address_found", "latitude", "longitude")]
df.info()
df.head()

df['latitude'] = pd.to_numeric(df['latitude'], errors='coerce')
df['longitude'] = pd.to_numeric(df['longitude'], errors='coerce')

points = [Point(xy) for xy in zip(df.longitude, df.latitude)]
geo_series = gpd.GeoSeries(points)
geo_series

# Create point geometries
geometry = gpd.points_from_xy(df.longitude, df.latitude)
geo_df = gpd.GeoDataFrame(
    df[["Heading_Text", "URL", "Address_found", "latitude", "longitude"]], geometry=geo_series
)

geo_df.head()

world = gpd.read_file(gpd.datasets.get_path("naturalearth_lowres"))
fig, ax = plt.subplots(figsize=(24, 18))

world.plot(ax=ax, alpha=0.4, color="grey")
geo_df.plot( ax=ax, color="blue")

for x, y, label in zip(df.longitude, df.latitude, df.Heading_Text):
    ax.annotate(label, xy=(x, y), xytext=(3, 3), textcoords="offset points")

plt.title("Projects")

# Stamen Toner
map = folium.Map(location=[0,0], tiles="Stamen Toner", zoom_start=2)
map

geo_df_list = []
for point in geo_df.geometry:
    if isinstance(point, Point) and len(point.xy[0]) == 1:
        geo_df_list.append([point.xy[1][0], point.xy[0][0]])
    else:
        # handle non-Point objects or Point objects with a different number of coordinates as needed
        pass

geo_df.head()

i = 0
for coordinates in geo_df_list:
    # Place the markers with the popup labels and data
    map.add_child(
        folium.Marker(
            location=coordinates,
            popup=
                "ProjectName: " + str(geo_df.Heading_Text[i]) + "<br>"
                + "URL: " + str(geo_df.URL[i]) + "<br>"
                + "Location: " + str(geo_df.Address_found[i]) + "<br>"
                + "Coordinates: " + str(geo_df_list[i]),
            icon=folium.Icon(color="blue"),
        )
    )
    i = i + 1

map.save("map.html")
